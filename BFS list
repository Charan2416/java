import java.util.*;

public class BFSlist {

    
    public static void bfs(List<List<Integer>> graph, int start) {
        int n = graph.size();
        boolean[] visited = new boolean[n];
        Queue<Integer> queue = new LinkedList<>();
        
        visited[start] = true;  
        queue.offer(start);

        while (!queue.isEmpty()) {
            int current = queue.poll();
            System.out.print(current + " ");

           
            for (int neighbor : graph.get(current)) {
                if (!visited[neighbor]) {
                    visited[neighbor] = true;
                    queue.offer(neighbor);
                }
            }
        }
    }

    public static void main(String[] args) {
        int n = 4;
        List<List<Integer>> adjlist = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            adjlist.add(new ArrayList<>());
        }
        adjlist.get(0).add(1);
        adjlist.get(0).add(2);
        adjlist.get(1).add(0);
        adjlist.get(1).add(3);
        adjlist.get(2).add(0);
        adjlist.get(2).add(3);
        adjlist.get(3).add(1);
        adjlist.get(3).add(2);

        System.out.println("BFS starting from node 0:");
        bfs(adjlist, 0);
    }
}
